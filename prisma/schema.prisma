// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User_customer {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  email          String        @unique
  name           String
  password       String?
  avatar         String?
  role           Role          @default(USER)
  refresh_token  RefreshToken? @relation(fields: [refreshTokenId], references: [id])
  refreshTokenId String?

  @@index([id])
  @@map("users_customer")
}

model User {
  id               String             @id @default(uuid())
  updatedAt        DateTime           @default(now())
  createdAt        DateTime           @default(now())
  email            String             @unique
  cnpj             String?
  name             String
  password         String?
  avatar           String?
  refresh_token    RefreshToken?
  resale           Resale[]
  product          Product[]
  customer         Customer[]
  role             Role               @default(RESELLER)
  Brand            Brand[]
  Product_Category Product_Category[]

  @@index([id])
  @@map("users")
}

model RefreshToken {
  id            String          @id @default(uuid())
  token         String          @default(uuid())
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @unique
  User_customer User_customer[]

  @@index([id])
  @@map("refresh_token")
}

model Customer {
  id         String   @id @default(uuid())
  name       String
  cell_phone String?
  resale     Resale[]
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([id])
  @@map("customer")
}

model Product_Category {
  id        String    @id @default(uuid())
  name      String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@index([id, userId])
  @@map("product_category")
}

model SKU {
  id             String        @id @default(uuid())
  name           String
  ean            String
  especification String
  weight         Int?
  height         Int?
  width          Int?
  product_id     String
  product        Product       @relation(fields: [product_id], references: [id])
  Pricing        Pricing?
  stock          Int
  min_stock      Int           @default(3)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  resaleItens    ResaleItens[]

  @@index([id, product_id])
  @@map("sku")
}

model Brand {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Product   Product[]

  @@index([id, userId])
  @@map("brand")
}

model Pricing {
  id         String   @id @default(uuid())
  sku_id     String   @unique
  cost_price Decimal
  price      Decimal
  sku        SKU      @relation(fields: [sku_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([id, sku_id])
  @@map("pricing")
}

model Product {
  id          String           @id @default(uuid())
  name        String
  brand_id    String
  brand       Brand            @relation(fields: [brand_id], references: [id])
  description String           @db.Text
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  category_id String
  category    Product_Category @relation(fields: [category_id], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())
  SKU         SKU[]

  @@index([id, userId, category_id, brand_id])
  @@map("product")
}

model Installments {
  id              String   @id @default(uuid())
  resale_itens    Resale   @relation(fields: [resale_itens_id], references: [id])
  resale_itens_id String
  payment_date    String
  payment_value   Decimal
  is_paid         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  @@index([id, resale_itens_id])
}

model ResaleItens {
  quantity  Int
  sku_id    String
  sku       SKU      @relation(fields: [sku_id], references: [id])
  resale_id String
  resale    Resale   @relation(fields: [resale_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([sku_id, resale_id])
  @@index([sku_id, resale_id])
  @@map("resale_itens")
}

model Resale {
  id           String         @id @default(uuid())
  customer     Customer       @relation(fields: [customer_id], references: [id])
  customer_id  String
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  installments Installments[]
  totalValue   Decimal
  products     ResaleItens[]
  canceled_at  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())

  @@index([id, userId])
  @@map("resale")
}

enum Role {
  USER
  ADMIN
  RESELLER
}
